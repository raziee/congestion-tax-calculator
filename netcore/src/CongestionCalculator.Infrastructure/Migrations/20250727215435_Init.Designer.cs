// <auto-generated />
using System;
using CongestionCalculator.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CongestionCalculator.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250727215435_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("CongestionCalculator.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExemptVehicles")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("MaxDailyTax")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("NoTaxBeforeHoliday")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NonTaxableDayOfWeeks")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("NonTaxableMonths")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("SingleChargeMinute")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SingleChargeRule")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("CongestionCalculator.Domain.Entities.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Holidays", (string)null);
                });

            modelBuilder.Entity("CongestionCalculator.Domain.Entities.TaxRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TaxRules", (string)null);
                });

            modelBuilder.Entity("CongestionCalculator.Domain.Entities.Holiday", b =>
                {
                    b.HasOne("CongestionCalculator.Domain.Entities.City", null)
                        .WithMany("Holidays")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("CongestionCalculator.Domain.Entities.TaxRule", b =>
                {
                    b.HasOne("CongestionCalculator.Domain.Entities.City", null)
                        .WithMany("TaxRules")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("CongestionCalculator.Domain.Entities.City", b =>
                {
                    b.Navigation("Holidays");

                    b.Navigation("TaxRules");
                });
#pragma warning restore 612, 618
        }
    }
}
